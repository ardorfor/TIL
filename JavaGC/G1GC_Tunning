G1 GC 문제
Perm generation collec하는 경우, class unloading이 제대로 잘 안되는 경우 문제
이 문제는 JDK 8u40 버전에서 permanent generation을 없애고 metaspace 방식으로 바꾼 후에 해결되었다.
JDK 8 G1 GC에서는 class 영역이 클 경우 class unloading을 하는 gc 시간이 매우 길어질 수 있는데 다음과 같이 JVM 옵션을 추가하면 대부분 해결된다는..
-XX:+UseLargePagesInMetaspace

JDK 8에서는 perm area가 아니라 metaspace에 class 정보들이 올라가는데 이때 그 영역이 크면 gc 시간이 오래 걸릴 수 있는데
이럴 때는 metaspace에 large page를 사용하여 접근하도록 JVM 옵션을 주면 대부분 문제가 해결될 수 있다는 것. (TLB 관련 이슈)

거대 객체라 부르는 메모리 사용량이 큰 객체에 대한 처리가 아직 최적화되지 않음
보통 한 region의 50% 크기를 넘으면 거대 객체로 분류되는데 G1 GC의 한 region 크기는 보통 1MB~32MB 정도이므로 거대 객체를 많이 사용해야 한다면 다른 gc policy를 선택하는 게 맞을 것이다.

young generation 즉, eden space에 대한 gc는 매우 빠르게 처리되지만, 일단 old로 넘어간 객체들의 컬렉션은 실행이 잘 되지 않는다는 것이 경험적으로 파악되었다.
Young GC는 일상적으로 실행되며, Old GC는 young area와 old area 비율이 일정 값 이하로 떨어졌을 때 (즉, young area가 부족하게 되었을 때) 트리거되어 실행된다.
예를 들어 기본값으로 young과 old는 1:2의 비율을 가지고 있다. 따라서 old area 비율이 늘어나서 young area의 2배를 가지게 되면 old generation gc가 실행된다.
만일 Old GC를 통해서도 필요한 young area를 확보하지 못하게 되면, 어쩔 수 없이 Full GC를 실행하게 된다.
Old gc가 잘 디되어야 하는데 그렇지 못하다보니 full gc를 피하기가 어렵다. (그런데 full gc 가 상대적으로는 다른 JVM에 비해 매우 빠르긴 하다.)
full gc가 시간이 짧다고 해도 성격 상 JVM의 모든 프로세싱을 중지시키는 STOP-THE-WORLD 방식이기 때문에 문제가 없는 것은 아니다.
(G1 GC에서는 young이든 old이든 copy하는 경우는 모두 STW 방식이다)

3번 문제로 인한 잦은 Full GC 를 회피하기 위한 방법

참고 : spark G1GC option에서 참고
https://databricks.com/blog/2015/05/28/tuning-java-garbage-collection-for-spark-applications.html

-XX:+UseG1GC -Xms88g -Xmx88g 
-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintAdaptiveSizePolicy -XX:+UnlockDiagnosticVMOptions 
-XX:+G1SummarizeConcMark 
-XX:InitiatingHeapOccupancyPercent=35 
-XX:ConcGCThread=20 (java 8 기본값 0) : old generation marking 하는 스레드 개수

ConcGCThread갯수를 좀더 많이 사용하도록 옵션 설정
InitiatingHeapOccupancyPercent옵션을 좀더 작게 설정하는 것이다.(기본값은 45이다.)

두번째 옵션은 언제 eden이 아닌 old heap 쪽 region들을 언제부터 mark할 것이냐를 지정하는 옵션이다.
기본값 45는 region 크기(기본값 1MB)의 45%가 차면 mark를 시작한다는 뜻.
35를 지정하면 35%만 되어도 시작한다는 뜻이다.

그 밖에 아래 옵션도 도움됨
-XX:G1ConcRefinementThreads=20 (java 8 기본값 0)
-XX:ParallelGCThreads=20 (ark-hadoop-cm2 기본값 23)

필자 의견 : 왠만하면 튜닝없이 기본 옵션으로 아주 동작 잘함. 반대로 튜닝 필요시에는 옵션을 적용해도 잘 되는 것 같지 않다는 의견..

나의 고민 : region의 크기는 어떤 것이 적당할까? 일단 기본값으로 해보면서 튜닝해볼까. 사례를 좀 찾아보자

G1GC 의 GC 종류

Getting Started with the G1 Garbage Collector
자세한 내용은 위 오라클의 G1 GC 소개 페이지를 참조하면 된다.
간략하게 설명하면 다음 세 가지로 구성된다.

먼저 G1 GC에서 JVM Heap 영역은 1MB~32MB 이내의 고정된 크기로 2000여개 영역으로 분할되어 있다. 이 고정 크기 부분 영역을 Region이라고 부른다.
각 Region은 기존 JVM heap의 영역이었던 New Area(Eden Area), Survivor Area, Old Generation Area, Permant Generation Area를 각각 담당하지만, 동적으로 역할이 변경될 수 있다.
세 가지 유형의 Collector는 Young과 Old Generation별 GC와 Full GC이다.
Young Generation GC
Old Generation GC
Full GC

1. Young Generation GC

Young GC는 하나의 단계로 구성된다.
-XX:ParallelGCThreads=8 과 같이 옵션을 통해 Young GC를 수행하는 thread 갯수를 조정할 수 있음. 대부분의 old generation GC의 copy나 cleanup 등 stop-the-world 방식 동작들(initial mark, remark, cleanup, copying, young)은 이 thread들이 piggyback하여 실행한다.
gc log에는 [GC pause (young)]으로 표시됨
Young GC pause (Stop-the-world)
Young GC는 단계가 지나면 young generation region의 객체들을 survivor region들로 copy(move)
Survivor region의 오래된 객체는 old generation region으로 이동

2. Old Generation GC

Old GC는 다섯 단계로 구성된다.
대부분의 단계는 필요 시에 Young GC 실행 시에 piggyback되어 실행되므로 Young GC의 parallel gc thread들이 실행한다.
다만 시간이 많이 걸릴 수 있고 stop-the-world가 필요없는 mark 단계는 별도의 쓰레드를 통해 실행된다.
-XX:ConcGCThreads=8 와 같이 옵션을 통해 Old generation marking 단계에 사용되는 GC 쓰레드 갯수를 조정한다.
gc log에는 young GC에 piggyback되는 초기 mark 단계는 [GC pause (young) (initial-mark)]으로 표시되고, 마찬가지로 young GC에 piggyback되는 copy/cleanup 단계는 [GC pause (mixed)]로 표시된다.

Initial Marking Phase (Stop-the-world)
Old GC가 필요해지면 Young GC 때 함께 실행
[GC pause (young) (initial-mark)]
Concurrent Marking Phase
빈 region들을 찾아 표기하고 region별 live object 비율을 계산해둔다.
이 region들은 바로 다음 Remark 단계에서 제거
별도의 concurrent GC thread들이 실행
Remark Phase (Stop-the-world)
빈 region들은 삭제해서 free로 만든다.
전체 region들의 live object 비율이 계산된다.
Copying/Cleanup Phase (Stop-the-world)
가장 빨리 청소가 가능한 live object 비율이 낮은 region들을 선택한다.
Young GC 때 선택한 region들을 청소한다.
[GC pause (mixed)]
After Copying/Cleanup Phase
선택된 region들의 compaction이 완료된 시점.
young과 old generation이 모두 cleanup되고 선택된 region들은 모두 새로운 region으로 compaction되어 위치한다.

3. Full GC

G1 GC는 가능하면 Full GC를 회피하기 위해 여러 가지 Young GC와 Old GC를 적절한 시점에 실행한다.
Young GC는 일상적으로 실행되며, Old GC는 young area와 old area 비율이 일정 값 이하로 떨어졌을 때 (즉, young area가 부족하게 되었을 때) 트리거되어 실행된다.
예를 들어 기본값으로 young과 old는 1:2의 비율을 가지고 있다. 따라서 old area 비율이 늘어나서 young area의 2배를 가지게 되면 old generation gc가 실행된다.
만일 Old GC를 통해서도 필요한 young area를 확보하지 못하게 되면, 어쩔 수 없이 Full GC를 실행하게 된다.
Single-threaded
Stop-the-world
이때 permanent area cleanup도 실행 (즉, classloader unloading은 이때 일어남)
